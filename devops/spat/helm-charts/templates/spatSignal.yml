apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.odeSpatSignalStatus.name }}
data:
  appsettings.Production.json: |
    {
      "Authentication": {
          "Authority": "{{ .Values.url.identity }}"
      },
      "Services": {
          "Configuration": "{{ .Values.url.transportProtocol }}://{{ .Values.url.apiHost }}/{{ .Values.url.configurationPath }}"
      },
      "Kafka": {
          "bootstrap": {
              "servers": "{{ .Values.kafka.server }}"
          },
          "ssl": {
            "ca": "{{.Values.kafka.ca}}",
            "certificate": "{{.Values.kafka.certificate}}"
          },
          "sasl": {
              "mechanism": "{{.Values.kafka.security.mechanism}}",
              "username": "{{ .Values.kafka.userName }}"
          },
          "security": {
               "protocol": "{{.Values.kafka.security.protocol}}"
          },
          "groupId": "{{ .Values.odeSpatSignalStatus.kafka.groupId }}"
      },
      "TenantId": "{{ .Values.tenantId }}"
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.odeSpatSignalStatus.name }}
  labels:
    app: {{ .Values.odeSpatSignalStatus.name }}
    chart: {{ .Values.odeSpatSignalStatus.name }}
    release: {{ .Release.Name }}


  annotations:
 
spec:
  revisionHistoryLimit: 0
  replicas: {{ .Values.odeSpatSignalStatus.replicaCount | default 1 }}
  selector:
    matchLabels:
      app: {{ .Values.odeSpatSignalStatus.name }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Values.odeSpatSignalStatus.name }}
     
        release: {{ .Release.Name }}
      annotations:

    spec:
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname"
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              release: {{ .Release.Name }}
      imagePullSecrets:
        - name: {{ .Values.secrets.imagePullSecret }}
      volumes:
        - name: config
          configMap:
            name: {{ .Values.odeSpatSignalStatus.name }}
      containers:
        - name: {{ .Values.odeSpatSignalStatus.name }}
          image: "{{ .Values.odeSpatSignalStatus.imageRepository }}:{{ .Values.odeSpatSignalStatus.imageTag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: Kafka__sasl__password
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kafka.userName }}
                  key: password
            - name: Authentication__ClientId
              valueFrom:
                secretKeyRef:
                  name: authentication
                  key: clientId
            - name: Authentication__ClientSecret
              valueFrom:
                secretKeyRef:
                  name: authentication
                  key: clientSecret
          volumeMounts:
            - name: config
              mountPath: /app/appsettings.Production.json
              subPath: appsettings.Production.json
              readOnly: true
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          {{- if .Values.odeSpatSignalStatus.probes.enabled }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          {{- end }}
          resources:
{{ toYaml .Values.odeSpatSignalStatus.resources | indent 12 }}

---

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.odeSpatSignalStatus.name }}
  labels:
    app: {{ .Values.odeSpatSignalStatus.name }}
    chart: {{ .Values.odeSpatSignalStatus.name }}
    release: {{ .Release.Name }}
 
spec:
  type: ClusterIP
  ports:
    - port: {{ .Values.odeSpatSignalStatus.service.port }}
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: {{ .Values.odeSpatSignalStatus.name }}
    release: {{ .Release.Name }}